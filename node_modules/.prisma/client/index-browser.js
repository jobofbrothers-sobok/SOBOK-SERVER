
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.0
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.0",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.Alim_CustomerScalarFieldEnum = {
  id: 'id',
  loginId: 'loginId',
  name: 'name',
  phone: 'phone',
  customerId: 'customerId',
  requestId: 'requestId'
};

exports.Prisma.Alim_RequestScalarFieldEnum = {
  id: 'id',
  category: 'category',
  content: 'content',
  isMessage: 'isMessage',
  isKakao: 'isKakao',
  writerId: 'writerId',
  timestamp: 'timestamp'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  loginId: 'loginId',
  password: 'password',
  name: 'name',
  email: 'email',
  phone: 'phone',
  termsAgree: 'termsAgree',
  marketingAgree: 'marketingAgree',
  storeId: 'storeId',
  image: 'image',
  stampCount: 'stampCount',
  couponCount: 'couponCount'
};

exports.Prisma.DeliveryScalarFieldEnum = {
  id: 'id',
  reward: 'reward',
  customer: 'customer',
  phone: 'phone',
  address: 'address',
  detailAddress: 'detailAddress',
  message: 'message',
  isGrant: 'isGrant',
  customerId: 'customerId'
};

exports.Prisma.ManagerScalarFieldEnum = {
  id: 'id',
  loginId: 'loginId',
  password: 'password'
};

exports.Prisma.NoticeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  image: 'image',
  timestamp: 'timestamp'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.StampScalarFieldEnum = {
  id: 'id',
  randNum: 'randNum',
  timestamp: 'timestamp',
  customerId: 'customerId',
  storeId: 'storeId',
  store: 'store',
  tourId: 'tourId',
  tour: 'tour'
};

exports.Prisma.Stamp_RequestScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  isGrant: 'isGrant'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  storeName: 'storeName',
  description: 'description',
  officeHour: 'officeHour',
  dayOff: 'dayOff',
  homepage: 'homepage',
  image: 'image',
  category: 'category',
  ownerId: 'ownerId',
  tourId: 'tourId',
  x: 'x',
  y: 'y'
};

exports.Prisma.Store_LikeScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  storeId: 'storeId'
};

exports.Prisma.Store_MenuScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  image: 'image',
  storeId: 'storeId'
};

exports.Prisma.Store_NoticeScalarFieldEnum = {
  id: 'id',
  category: 'category',
  title: 'title',
  content: 'content',
  image: 'image',
  storeId: 'storeId',
  createdTime: 'createdTime'
};

exports.Prisma.Store_OwnerScalarFieldEnum = {
  id: 'id',
  loginId: 'loginId',
  password: 'password',
  store: 'store',
  director: 'director',
  phone: 'phone',
  email: 'email',
  address: 'address',
  detailAddress: 'detailAddress',
  licenseNumber: 'licenseNumber',
  licenseImage: 'licenseImage',
  authorized: 'authorized',
  termsAgree: 'termsAgree',
  marketingAgree: 'marketingAgree',
  storeId: 'storeId',
  stampAuthorized: 'stampAuthorized',
  profileImage: 'profileImage'
};

exports.Prisma.Store_ProductScalarFieldEnum = {
  id: 'id',
  category: 'category',
  name: 'name',
  price: 'price',
  discountPrice: 'discountPrice',
  url: 'url',
  image: 'image',
  storeId: 'storeId'
};

exports.Prisma.Store_ReviewScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  image: 'image',
  timestamp: 'timestamp',
  writerId: 'writerId',
  storeId: 'storeId',
  writerName: 'writerName'
};

exports.Prisma.TourScalarFieldEnum = {
  id: 'id',
  keyword: 'keyword',
  title: 'title',
  reward: 'reward',
  image: 'image',
  cafeList: 'cafeList'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});


exports.Prisma.ModelName = {
  Customer: 'Customer',
  Delivery: 'Delivery',
  Manager: 'Manager',
  Stamp: 'Stamp',
  Store: 'Store',
  Store_Menu: 'Store_Menu',
  Store_Notice: 'Store_Notice',
  Store_Owner: 'Store_Owner',
  Store_Product: 'Store_Product',
  Tour: 'Tour',
  Store_Review: 'Store_Review',
  Notice: 'Notice',
  Alim_Customer: 'Alim_Customer',
  Alim_Request: 'Alim_Request',
  Stamp_Request: 'Stamp_Request',
  Store_Like: 'Store_Like'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
