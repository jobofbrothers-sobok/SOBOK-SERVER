generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id             Int             @id @unique @default(autoincrement())
  loginId        String          @unique @db.VarChar(20)
  password       String          @db.VarChar(200)
  name           String          @unique @db.VarChar(20)
  email          String          @unique @db.VarChar(45)
  phone          String          @db.VarChar(20)
  termsAgree     Boolean
  marketingAgree Boolean?
  storeId        Int?
  image          String?         @db.VarChar(800)
  stampCount     Int             @default(0)
  couponCount    Int             @default(0)
  Alim_Customer  Alim_Customer[]
  Store          Store?          @relation(fields: [storeId], references: [id], onDelete: NoAction, map: "storeId")
  Delivery       Delivery[]
  Stamp          Stamp[]
  Store_Review   Store_Review[]
}

model Delivery {
  id            Int      @id @unique @default(autoincrement())
  reward        String   @db.VarChar(30)
  customer      String   @db.VarChar(30)
  phone         String   @db.VarChar(20)
  address       String   @db.VarChar(50)
  detailAddress String?  @db.VarChar(50)
  message       String   @db.VarChar(200)
  isGrant       Boolean? @default(false)
  customerId    Int
  Customer      Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customerId")
}

model Manager {
  id       Int    @id @default(autoincrement())
  loginId  String @unique @db.VarChar(20)
  password String @db.VarChar(200)
}

model Stamp {
  id         Int       @id @unique @default(autoincrement())
  randNum    String?   @unique @db.VarChar(7)
  timestamp  DateTime? @db.Timestamp(6)
  customerId Int?
  storeId    Int?
  store      String?   @db.VarChar(30)
  tourId     Int?
  tour       String?   @db.VarChar(30)
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: NoAction, map: "customerId")
  Store      Store?    @relation(fields: [storeId], references: [id], onDelete: NoAction, map: "storeId")
  Tour       Tour?     @relation(fields: [tourId], references: [id], onDelete: NoAction, map: "tourId")
}

model Store {
  id                                     Int             @id @unique @default(autoincrement())
  storeName                              String          @db.VarChar(30)
  description                            String?         @db.VarChar(100)
  officeHour                             String?         @db.VarChar(50)
  dayOff                                 String?         @db.VarChar(50)
  homepage                               String?         @db.VarChar(200)
  image                                  String?         @db.VarChar(200)
  category                               String[]
  ownerId                                Int?            @unique
  tourId                                 Int?
  Customer                               Customer[]
  Stamp                                  Stamp[]
  Store_Owner_Store_ownerIdToStore_Owner Store_Owner?    @relation("Store_ownerIdToStore_Owner", fields: [ownerId], references: [id], onDelete: NoAction, map: "ownerId")
  Tour                                   Tour?           @relation(fields: [tourId], references: [id], onDelete: NoAction, map: "tourId")
  Store_Menu                             Store_Menu[]
  Store_Notice                           Store_Notice[]
  Store_Owner_Store_Owner_storeIdToStore Store_Owner?    @relation("Store_Owner_storeIdToStore")
  Store_Product                          Store_Product[]
  Store_Review                           Store_Review?
}

model Store_Menu {
  id      Int     @id @default(autoincrement())
  title   String? @db.VarChar(30)
  content String? @db.VarChar(300)
  image   String? @db.VarChar(300)
  storeId Int?
  Store   Store?  @relation(fields: [storeId], references: [id], onDelete: NoAction, map: "storeId")
}

model Store_Notice {
  id          Int       @id @unique @default(autoincrement())
  category    String?   @db.VarChar(30)
  title       String?   @db.VarChar(100)
  content     String?   @db.VarChar(200)
  image       String?   @db.VarChar(300)
  storeId     Int?
  createdTime DateTime? @db.Timestamp(6)
  Store       Store?    @relation(fields: [storeId], references: [id], onDelete: NoAction, map: "storeId")
}

model Store_Owner {
  id                               Int            @id @default(autoincrement())
  loginId                          String         @unique @db.VarChar(20)
  password                         String?        @db.VarChar(200)
  store                            String?        @db.VarChar(30)
  director                         String?        @db.VarChar(20)
  phone                            String?        @db.VarChar(20)
  email                            String?        @unique @db.VarChar(45)
  address                          String?        @db.VarChar(30)
  detailAddress                    String?        @db.VarChar(30)
  licenseNumber                    String?        @db.VarChar(20)
  licenseImage                     String         @db.VarChar(200)
  authorized                       Boolean?       @default(false)
  termsAgree                       Boolean?
  marketingAgree                   Boolean?
  storeId                          Int?           @unique
  stampAuthorized                  Boolean?       @default(false)
  profileImage                     String?        @db.VarChar(800)
  Alim_Request                     Alim_Request[]
  Stamp_Request                    Stamp_Request?
  Store_Store_ownerIdToStore_Owner Store?         @relation("Store_ownerIdToStore_Owner")
  Store_Store_Owner_storeIdToStore Store?         @relation("Store_Owner_storeIdToStore", fields: [storeId], references: [id], onDelete: NoAction, map: "storeId")
}

model Store_Product {
  id            Int     @id @default(autoincrement())
  category      String? @db.VarChar(30)
  name          String? @db.VarChar(30)
  price         String? @db.VarChar(30)
  discountPrice String? @db.VarChar(30)
  url           String? @db.VarChar(300)
  image         String? @db.VarChar(300)
  storeId       Int?
  Store         Store?  @relation(fields: [storeId], references: [id], onDelete: NoAction, map: "storeId")
}

model Tour {
  id       Int      @id @default(autoincrement())
  keyword  String   @db.VarChar(50)
  title    String   @db.VarChar(50)
  reward   String   @db.VarChar(50)
  image    String?  @db.VarChar(200)
  cafeList String[]
  Stamp    Stamp[]
  Store    Store[]
}

model Store_Review {
  id        Int      @unique @default(autoincrement())
  title     String?  @db.VarChar(100)
  content   String   @db.VarChar(200)
  image     String?  @db.VarChar(300)
  timestamp DateTime @db.Timestamp(6)
  writerId  Int      @default(autoincrement())
  storeId   Int      @id @unique @default(autoincrement())
  Store     Store    @relation(fields: [storeId], references: [id], onDelete: NoAction, map: "storeId")
  Customer  Customer @relation(fields: [writerId], references: [id], onDelete: NoAction, map: "wrtierId")
}

model Notice {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(100)
  content   String   @db.VarChar(500)
  image     String?  @db.VarChar(300)
  timestamp DateTime @db.Timestamp(6)
}

model Alim_Customer {
  id           Int          @id @default(autoincrement())
  loginId      String       @db.VarChar(20)
  name         String?      @db.VarChar(20)
  phone        String       @db.VarChar(20)
  customerId   Int
  requestId    Int
  Customer     Customer     @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customerId")
  Alim_Request Alim_Request @relation(fields: [requestId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "requestId")
}

model Alim_Request {
  id            Int             @id @default(autoincrement())
  category      String          @db.VarChar(50)
  content       String          @db.VarChar(500)
  isMessage     Boolean
  isKakao       Boolean
  writerId      Int
  Alim_Customer Alim_Customer[]
  Store_Owner   Store_Owner     @relation(fields: [writerId], references: [id], onDelete: NoAction, map: "writerId")
}

model Stamp_Request {
  id          Int         @id @default(autoincrement())
  ownerId     Int         @unique
  isGrant     Boolean     @default(false)
  Store_Owner Store_Owner @relation(fields: [ownerId], references: [id], onDelete: NoAction, map: "ownerId")
}
