generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id             Int      @id @unique @default(autoincrement())
  loginId        String   @unique @db.VarChar(20)
  password       String   @db.VarChar(200)
  name           String   @unique @db.VarChar(20)
  email          String   @db.VarChar(45)
  phone          String   @db.VarChar(20)
  termsAgree     Boolean
  marketingAgree Boolean?
  storeId        Int?
  Store          Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade, map: "storeId")
}

model Store {
  id                                     Int            @id @default(autoincrement())
  storeName                              String         @db.VarChar(30)
  description                            String?        @db.VarChar(100)
  officeHour                             String?        @db.VarChar(50)
  dayOff                                 String?        @db.VarChar(50)
  homepage                               String?        @db.VarChar(200)
  image                                  String?        @db.VarChar(200)
  category                               String[]
  ownerId                                Int?
  Customer                               Customer[]
  Store_Owner                            Store_Owner?   @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "ownerId")
  Store_Notice                           Store_Notice[]
  Store_Owner_Store_Owner_storeIdToStore Store_Owner[]  @relation("Store_Owner_storeIdToStore")
}

model Store_Owner {
  id                               Int      @id @default(autoincrement())
  loginId                          String   @unique @db.VarChar(20)
  password                         String   @db.VarChar(200)
  store                            String   @db.VarChar(30)
  director                         String   @db.VarChar(20)
  phone                            String   @db.VarChar(20)
  email                            String   @db.VarChar(45)
  address                          String   @db.VarChar(30)
  detailAddress                    String   @db.VarChar(30)
  licenseNumber                    String   @db.VarChar(20)
  licenseImage                     String   @db.VarChar(200)
  authorized                       Boolean?
  termsAgree                       Boolean
  marketingAgree                   Boolean?
  storeId                          Int?
  isGrant                          Boolean  @default(false)
  Store                            Store[]
  Store_Store_Owner_storeIdToStore Store?   @relation("Store_Owner_storeIdToStore", fields: [storeId], references: [id], onDelete: Cascade, map: "storeId")
}

model Manager {
  id       Int    @id @default(autoincrement())
  loginId  String @db.VarChar(20)
  password String @db.VarChar(200)
}

model Store_Notice {
  id       Int     @id @unique @default(autoincrement())
  category String? @db.VarChar(30)
  title    String? @db.VarChar(100)
  content  String? @db.VarChar(200)
  image    String? @db.VarChar(300)
  storeId  Int?
  Store    Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade, map: "storeId")
}

model Store_Menu {
  id      Int     @id @default(autoincrement())
  title   String? @db.VarChar(30)
  content String? @db.VarChar(300)
  image   String? @db.VarChar(300)
}
